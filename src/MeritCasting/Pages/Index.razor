@page "/"
@using System.Diagnostics
@using System.Formats.Asn1
@using System.ServiceModel.Syndication
@using System.Threading
@using System.Timers
@using System.Xml

@inject IJSRuntime JS;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using Append.Blazor.Notifications
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.WebUtilities
@using Notification = MeritCasting.Notification

@inject INotificationService NotificationService
@inject NavigationManager NavManager
@inject Repository Repo

@implements IDisposable

@if (Redirect)
{
    <meta http-equiv="refresh" content="0; URL=@RedirectUrl" />
}

<h1>Merit Casting <br /><br />Extras Opportunity Notifications</h1>

<br />
<br />

@if (ShowAppInstallButton)
{
    <button class="btn btn-primary" @onclick="OnInstallApp">Install App</button>
    <br />
    <br />
}

    This app checks every 15 mintues for the latest extras opportunities.
<br />
<br />

@*
    <div>
        <input id="ShowNotifications" type="checkbox" checked="@ShowNotifications" @onchange="@OnShowNotificationsChanged" />
        <label for="ShowNotifications">Show Notifications (recommended)</label>
        <br />
        <button class="btn btn-primary" hidden="@HideNotificationRequestButton" @onclick="OnAllowNotifications">Allow Notifications for Extras Opportunities</button>
    </div>
    <div>
        <input id="AutoGenerateNotifications" type="checkbox" checked="@AutogenerateNotifications" @onchange="@OnAutogenerateNotificationsChanged" />
        <label for="AutoGenerateNotifications">Autogenerate Notifications</label>
    </div>
    <button class="btn btn-primary" @onclick="OnFillList">Fill List</button>
    <button class="btn btn-primary" @onclick="OnClearLocalStorage">Clear Local Storage</button>
    <button class="btn btn-primary" @onclick="OnShowGoogleNotification">Show Google Notification</button>
    <button class="btn btn-primary" @onclick="OnShowMeritCastingAppNotification">Merit Casting App Notification</button>
    <button class="btn btn-primary" @onclick="OnClearLocalStorage">Clear Local Storage</button>
    <button class="btn btn-primary" @onclick="OnStartPostPolling">Start Post Polling</button>
    <button class="btn btn-primary" @onclick="OnFillList">Fill List</button>
*@

    Unread Posts (newest at the top):
<ul>
    @if (_unreadPosts.Any())
    {
        @foreach (var unreadPost in _unreadPosts.OrderByDescending(post => post.PublishTime))
        {
            var unreadPostRef = unreadPost;
            <li><a href="javascript:;" onclick="@(EventCallback.Factory.Create(this, e => NavigateThroughServiceWorker(unreadPostRef)))" @onchange:preventDefault>@unreadPostRef.FeedName - @unreadPostRef.DescriptionPreview</a></li>
            @*<ul>
                    <li><a href="@unreadPostRef.Url">Standard</a></li>
                    <li><a href="@unreadPostRef.Url" target="_blank">target=_blank</a></li>
                    <li><a href="javascript:;" onclick="@(EventCallback.Factory.Create(this, e => NavigateThroughJavascript(unreadPostRef)))" @onchange:preventDefault>Javascript</a></li>
                    <li><a href="javascript:;" onclick="@(EventCallback.Factory.Create(this, e => NavigateThroughRedirect(unreadPostRef)))" @onchange:preventDefault>Redirect</a></li>
                    <li><a href="javascript:;" onclick="@(EventCallback.Factory.Create(this, e => NavigateThroughServiceWorker(unreadPostRef)))" @onchange:preventDefault>Service Worker</a></li>
                    <li><a href="https://l.facebook.com/l.php?u=@unreadPostRef.Url">Facebook Redirect</a></li>
                </ul>*@
        }
    }
    else
    {
        <li>@StatusMessage</li>
    }
</ul>

<br />

    Extras oppportunity notifications come from the following:
<ul>
    <li>
        Casting agencies (multiple productions)
        <ul>
            <li><a target="_blank" href="https://www.facebook.com/MeritCastingChicago">Merit Casting</a></li>
            <li><a target="_blank" href="https://www.facebook.com/4StarCasting">4 Star Casting</a></li>
            <li><a target="_blank" href="https://www.facebook.com/extraordinarycasting">ExtraOrdinary Casting</a></li>
        </ul>
    </li>
    <li>
        Shows
        <ul>
            <li><a target="_blank" href="https://www.facebook.com/ChicagoFireExtras">Chicago Fire Extras</a></li>
            <li><a target="_blank" href="https://www.facebook.com/CPDExtras">Chicago PD Extras</a></li>
            <li><a target="_blank" href="https://www.facebook.com/Chicagomedextras">Chicago Med Extras</a></li>
            <li><a target="_blank" href="https://www.facebook.com/The-Big-Leap-Extras-102137858062004">Big Leap Extras</a></li>
            <li><a target="_blank" href="https://www.facebook.com/darling.series.9">Darling Series Extras</a></li>
        </ul>
    </li>
</ul>

@code
{
    private const string ShowNotificationsKey = "ShowNotifications";
    private const string AutogenerateNotificationsKey = "AutogenerateNotifications";
    private const string CastingPostQueryParameter = "castingPost";

    private System.Timers.Timer _browserInteractionMonitor;
    private List<Post> _unreadPosts = new List<Post>();
    private CancellationTokenSource _stopFetchingNewPosts;

    private bool HideNotificationRequestButton { get; set; } = true;
    private bool ShowNotifications { get; set; }
    private bool AutogenerateNotifications { get; set; }
    private string CastingPostUrl { get; set; }
    private string RedirectUrl { get; set; }
    private bool Redirect { get; set; }
    private string StatusMessage { get; set; } = "Loading...";
    private bool ShowAppInstallButton { get; set; } = false;

    public void Dispose()
    {
        var notificationPermissionTimer = _browserInteractionMonitor;
        if (notificationPermissionTimer != null)
        {
            notificationPermissionTimer.Elapsed -= OnCheckForBrowserInteraction;
        }

        _stopFetchingNewPosts.Cancel();
        _stopFetchingNewPosts.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (QueryHelpers.ParseQuery(NavManager.ToAbsoluteUri(NavManager.Uri).Query).TryGetValue(CastingPostQueryParameter, out var castingPostUrl))
        {
            CastingPostUrl = castingPostUrl.FirstOrDefault();

            // remove post from collection of unread posts
            if (await RemovePostWithUrlAsync(CastingPostUrl))
            {
                // navigate to post
                //NavManager.NavigateTo(CastingPostUrl);
                await NavigateAsync(CastingPostUrl);
            }
        }

        ShowNotifications = await localStorage.GetItemAsync<bool>(ShowNotificationsKey);
        AutogenerateNotifications = await localStorage.GetItemAsync<bool>(AutogenerateNotificationsKey);
        await RefreshAppInstallButtonAsync();

        // display latest posts
        await RefreshUnreadPostsAsync(await Repo.GetUnreadPostsAsync());

        _stopFetchingNewPosts = new CancellationTokenSource();

        var feeds = App.CastingFeeds;

        // update default status message after all feeds have been checked
        await Task.WhenAll(feeds.Select(feed => CheckFeedAsync(feed)));
        await InvokeAsync(() => StatusMessage = "None");

        // monitor feeds
        _ = Task.WhenAll(feeds.Select(feed => MonitorFeedAsync(feed)));

        _browserInteractionMonitor = new System.Timers.Timer(1 * 1000);
        _browserInteractionMonitor.Elapsed += OnCheckForBrowserInteraction;
        _browserInteractionMonitor.Enabled = true;
    }

    private async Task MonitorFeedAsync(string feedUrl)
    {
        async Task WaitUntilNextFeedCheckAsync(DateTime lastFeedPublishTime) => await Task.Delay((int)(App.GetNextFeedCheckTime(lastFeedPublishTime) - DateTime.Now).TotalMilliseconds, _stopFetchingNewPosts.Token);

        while (!_stopFetchingNewPosts.IsCancellationRequested)
        {
            try
            {
                var latestFeedUpdateTime = await CheckFeedAsync(feedUrl);

                // wait for next feed update
                if (latestFeedUpdateTime != null)
                {
                    await WaitUntilNextFeedCheckAsync(latestFeedUpdateTime.Value);
                }
            }
            catch (Exception e)
            {
                Console.Error.WriteLine($"{e.Message}{Environment.NewLine}{e.StackTrace}");
            }
        }
    }

    private async Task<DateTime?> CheckFeedAsync(string feedUrl)
    {
        DateTime? latestFeedUpdateTime = null;

        try
        {
            Console.WriteLine($"Checking feed - {feedUrl}");

            var previousFeedUpdateTime = await Repo.GetLastFeedPublishTime(feedUrl);
            var updatedFeedExpected = previousFeedUpdateTime != null && DateTime.Now > App.GetExpectedFeedUpdateTime(previousFeedUpdateTime.Value);

            // get feed if we never checked before or we expect an updated feed
            if (previousFeedUpdateTime == null || updatedFeedExpected)
            {
                var feed = await Repo.GetFeedAsync(feedUrl);

                latestFeedUpdateTime = App.GetPublishDate(feed);

                if (updatedFeedExpected)
                {
                    await ProcessFeedAsync(feed, previousFeedUpdateTime.Value);
                }
            }
            else
            {
                latestFeedUpdateTime = previousFeedUpdateTime.Value;
            }

            // save latest feed publish time
            await Repo.SaveLastFeedPublishTime(feedUrl, latestFeedUpdateTime.Value);
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"{e.Message}{Environment.NewLine}{e.StackTrace}");
        }

        return latestFeedUpdateTime;
    }

    private async Task ProcessFeedAsync(SyndicationFeed feed, DateTime publishTimeOfLastProcessedFeed)
    {
        var newPosts = feed.Items.Where(item => item.PublishDate.LocalDateTime > publishTimeOfLastProcessedFeed).ToArray();

        // save new posts
        if (newPosts.Any())
        {
            var currentUnreadPosts = await Repo.GetUnreadPostsAsync();

            currentUnreadPosts.AddRange(newPosts.Select(newPost => new Post(
                App.GetNormalizedFeedTitle(feed),
                newPost.Summary.Text.Substring(0, Math.Min(30, newPost.Summary.Text.Length)),
                newPost.Id,
                newPost.PublishDate.LocalDateTime,
                false)));

            await Repo.SaveUnreadPostsAsync(currentUnreadPosts);

            // notify latest posts
            if (ShowNotifications && await NotificationService.GetCurrentPermissionAsync(JS) == PermissionType.Granted)
            {
                var unreadPosts = new List<Post>(currentUnreadPosts);

                foreach (var unnotifiedPost in currentUnreadPosts.Where(unreadPost => !unreadPost.NotificationShown).OrderBy(unreadPost => unreadPost.PublishTime))
                {
                    // show notification
                    await Notification.ShowAsync(JS, new Notification("Merit Casting", $"New post from {unnotifiedPost.FeedName}!", $"{NavManager.BaseUri}?{CastingPostQueryParameter}={unnotifiedPost.Url}"));

                    // save notification status
                    unnotifiedPost.NotificationShown = true;

                    await Repo.SaveUnreadPostsAsync(unreadPosts);
                }
            }

            // display latest posts
            await RefreshUnreadPostsAsync(currentUnreadPosts);
        }
    }

    private async Task OnInstallApp()
    {
        try
        {
            await JS.InvokeVoidAsync("installApp");
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e.Message);
        }
    }

    private async Task<bool> RemovePostWithUrlAsync(string url)
    {
        var unreadPosts = await Repo.GetUnreadPostsAsync();
        var unreadPostToRemove = unreadPosts.FirstOrDefault(unreadPost => unreadPost.Url.Equals(url, StringComparison.InvariantCultureIgnoreCase));
        if (unreadPostToRemove != null)
        {
            unreadPosts.Remove(unreadPostToRemove);

            await Repo.SaveUnreadPostsAsync(unreadPosts);
        }

        return unreadPostToRemove != null;
    }

    private async void OnCheckForBrowserInteraction(object sender, ElapsedEventArgs e)
    {
        // check if the notification permission changed via browser controls
        await RefreshHideNotificationRequestButtonAsync();

        // check if the app was installed via browser controls
        await RefreshAppInstallButtonAsync();
    }

    private Task RefreshAppInstallButtonAsync() => InvokeAsync(async () => ShowAppInstallButton = !await JS.InvokeAsync<bool>("isAppInstalled"));

    private void OnStartPostPolling()
    {
        //_newPostsTimers.Enabled = true;
    }

    private async Task OnClearLocalStorage()
    {
        await localStorage.ClearAsync();
    }

    private async void OnUnreadPostClick(Post unreadPost)
    {
        //await RemovePostWithUrlAsync(unreadPost.Url);
        //await RefreshUnreadPostsAsync(await Repo.GetUnreadPostsAsync());

        //await NavigateAsync(unreadPost.Url);
    }

    private async void NavigateThroughServiceWorker(Post unreadPost)
    {
        await RemovePostWithUrlAsync(unreadPost.Url);
        await RefreshUnreadPostsAsync(await Repo.GetUnreadPostsAsync());

        await JS.InvokeVoidAsync("navWithServiceWorker", unreadPost.Url);
    }

    private async void NavigateThroughJavascript(Post unreadPost)
    {
        await RemovePostWithUrlAsync(unreadPost.Url);
        await RefreshUnreadPostsAsync(await Repo.GetUnreadPostsAsync());

        await JS.InvokeVoidAsync("NavToUrl", unreadPost.Url);
    }

    private async void NavigateThroughRedirect(Post unreadPost)
    {
        await RemovePostWithUrlAsync(unreadPost.Url);
        await RefreshUnreadPostsAsync(await Repo.GetUnreadPostsAsync());

        await JS.InvokeVoidAsync("AddWindowToHistory");
        RedirectUrl = unreadPost.Url;
        Redirect = true;
        StateHasChanged();
    }

    private async Task NavigateAsync(string url)
    {
        await RemovePostWithUrlAsync(url);
        await RefreshUnreadPostsAsync(await Repo.GetUnreadPostsAsync());

        await JS.InvokeVoidAsync("NavToUrl", url);
    }

    private async void OnFillList()
    {
        var feed = await Repo.GetFeedAsync(App.CastingFeeds[0]);

        await ProcessFeedAsync(feed, DateTime.UnixEpoch);
    }

    private async Task RefreshUnreadPostsAsync(List<Post> unreadPosts)
    {
        await InvokeAsync(() =>
        {
            _unreadPosts.Clear();
            _unreadPosts.AddRange(unreadPosts.OrderByDescending(unreadPost => unreadPost.PublishTime));
            StateHasChanged();
        });
    }

    private async Task RefreshHideNotificationRequestButtonAsync()
    {
        var showNotificationRequestButton =
            ShowNotifications
            && await NotificationService.IsSupportedByBrowserAsync()
            && await NotificationService.GetCurrentPermissionAsync(JS) != PermissionType.Granted;

        HideNotificationRequestButton = !showNotificationRequestButton;
        StateHasChanged();
    }

    private async void OnShowNotificationsChanged(ChangeEventArgs e)
    {
        ShowNotifications = e.Value != null && e.Value.Equals(true);

        await localStorage.SetItemAsync(ShowNotificationsKey, ShowNotifications);

        await RefreshHideNotificationRequestButtonAsync();
    }

    private async void OnAutogenerateNotificationsChanged(ChangeEventArgs e)
    {
        AutogenerateNotifications = e.Value != null && e.Value.Equals(true);

        await localStorage.SetItemAsync(AutogenerateNotificationsKey, AutogenerateNotifications);

        _ = Task.Run(async () =>
        {
            int i = 0;

            while (AutogenerateNotifications)
            {
                await Notification.ShowAsync(JS, new Notification("Merit Casting", $"Test Notification {i++}", $"https://twitter.com"));
                await Task.Delay(60 * 1000);
            }
        });
    }

    private async Task OnShowGoogleNotification()
    {
        if (await NotificationService.GetCurrentPermissionAsync(JS) == PermissionType.Granted)
        {
            await Notification.ShowAsync(JS, new Notification("Merit Casting", "New post from 4 Star Casting!", $"{NavManager.BaseUri}?castingPost=https://www.facebook.com/4StarCasting"));
            await Notification.ShowAsync(JS, new Notification("Merit Casting", "New post from Chicago Fire Extras!", $"{NavManager.BaseUri}?castingPost=https://www.facebook.com/ChicagoFireExtras"));
        }
    }

    private async Task OnShowMeritCastingAppNotification()
    {
        if (await NotificationService.GetCurrentPermissionAsync(JS) == PermissionType.Granted)
        {
            await Notification.ShowAsync(JS, new Notification("Merit Casting", "PWA Notification", NavManager.BaseUri));
        }
    }

    private async Task OnAllowNotifications()
    {
        if (await NotificationService.GetCurrentPermissionAsync(JS) != PermissionType.Granted)
        {
            await NotificationService.RequestPermissionAsync();
        }
    }
}